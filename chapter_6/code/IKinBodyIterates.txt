def IKinBodyIterates(Blist, M, T, thetalist0, eomg, ev):
    """Computes inverse kinematics in the body frame for an open chain robot and prints information during each iterate

    :param Blist: The joint screw axes in the end-effector frame when the
                  manipulator is at the home position, in the format of a
                  matrix with axes as the columns
    :param M: The home configuration of the end-effector
    :param T: The desired end-effector configuration Tsd
    :param thetalist0: An initial guess of joint angles that are close to
                       satisfying Tsd
    :param eomg: A small positive tolerance on the end-effector orientation
                 error. The returned joint angles must give an end-effector
                 orientation error less than eomg
    :param ev: A small positive tolerance on the end-effector linear position
               error. The returned joint angles must give an end-effector
               position error less than ev
    :return thetalist: Joint angles that achieve T within the specified
                       tolerances,
    :return success: A logical value where TRUE means that the function found
                     a solution and FALSE means that it ran through the set
                     number of maximum iterations without finding a solution
                     within the tolerances eomg and ev.
    Uses an iterative Newton-Raphson root-finding method.
    The maximum number of iterations before the algorithm is terminated has
    been hardcoded in as a variable called maxiterations. It is set to 20 at
    the start of the function, but can be changed if needed.

    Example Input:
        Blist = np.array([[0, 0, -1, 2, 0,   0],
                          [0, 0,  0, 0, 1,   0],
                          [0, 0,  1, 0, 0, 0.1]]).T
        M = np.array([[-1, 0,  0, 0],
                      [ 0, 1,  0, 6],
                      [ 0, 0, -1, 2],
                      [ 0, 0,  0, 1]])
        T = np.array([[0, 1,  0,     -5],
                      [1, 0,  0,      4],
                      [0, 0, -1, 1.6858],
                      [0, 0,  0,      1]])
        thetalist0 = np.array([1.5, 2.5, 3])
        eomg = 0.01
        ev = 0.001
    Output:
        (np.array([1.57073819, 2.999667, 3.14153913]), True)
    """

    #initialize a joint_matrix with initial joint angles

    joint_matrix = np.array([k for k in thetalist0])

    #set variables for iteration
    thetalist = np.array(thetalist0).copy()
    i = 0
    maxiterations = 20

    #calculate twist error for the preliminary iteration with initial guess
    Vb = se3ToVec(MatrixLog6(np.dot(TransInv(FKinBody(M, Blist, \
                                                      thetalist)), T)))
    #calculate angular and linear error for the preliminary iteration with initial guess
    angular_err = np.linalg.norm([Vb[0], Vb[1], Vb[2]])
    linear_err = np.linalg.norm([Vb[3], Vb[4], Vb[5]])

    #calculate end-effector configuration for the preliminary iteration with initial guess
    Tee = FKinBody(M, Blist, thetalist)

    #calculate if the error is bigger than the tolerance and store the result in a boolean variable
    err = np.linalg.norm([Vb[0], Vb[1], Vb[2]]) > eomg \
          or np.linalg.norm([Vb[3], Vb[4], Vb[5]]) > ev

    #print the results for the initial guess
    print("Iteration ", 0)
    print("joint vector: ", thetalist)
    print("SE(3) end - effector config: ", Tee)
    print("error twist V_b :", Vb)
    print("angular error magnitude ||omega_b||: ", angular_err)
    print("linear error magnitude ||v_b||: ", linear_err)

    #enter the loop until the error is lower than the tolerance or the max number of iterations has been reached
    while err and i < maxiterations:
        #use newton-raphson method to calculate the new joint angles
        thetalist = thetalist \
                    + np.dot(np.linalg.pinv(JacobianBody(Blist, \
                                                         thetalist)), Vb)
        #add the new joint angles as a line in the joint_matrix tab
        joint_matrix = np.vstack((joint_matrix, thetalist))

        i = i + 1

        #calculate all the quantities to print to the user
        Vb \
        = se3ToVec(MatrixLog6(np.dot(TransInv(FKinBody(M, Blist, \
                                                       thetalist)), T)))
        angular_err = np.linalg.norm([Vb[0], Vb[1], Vb[2]])
        linear_err = np.linalg.norm([Vb[3], Vb[4], Vb[5]])

        Tee = FKinBody(M, Blist, thetalist)	

        err = np.linalg.norm([Vb[0], Vb[1], Vb[2]]) > eomg \
              or np.linalg.norm([Vb[3], Vb[4], Vb[5]]) > ev

        #print all quantities to the user
        print("Iteration ", i)
        print("joint vector: ", thetalist)
        print("SE(3) end - effector config: ", Tee)
        print("error twist V_b :", Vb)
        print("angular error magnitude ||omega_b||: ", angular_err)
        print("linear error magnitude ||v_b||: ", linear_err)

    #specify the path where you want to save the matrix
    file_path = 'joint_matrix.csv'

    #save the joint_matrix as a .csv file
    np.savetxt(file_path, joint_matrix, delimiter=',')

    return (thetalist, not err)
